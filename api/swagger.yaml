openapi: 3.0.0
info:
  title: Your API Title
  version: 1.0.0
  description: API Documentation for your application
servers:
  - url: http://localhost:80 # Change to your server URL

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: Registration successful
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: Login an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '404':
          description: User not found
        '401':
          description: Incorrect password

  /api/authenticate:
    post:
      summary: Check user authentication
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        '401':
          description: Authentication required
        '404':
          description: User not found
        '403':
          description: Invalid token

  /api/dashboard:
    get:
      summary: Get dashboard data
      tags:
        - Dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      role:
                        type: string
        '403':
          description: Access denied
        '401':
          description: Authentication required

  /api/customers:
    post:
      summary: Create a new customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customerId:
                    type: string  # The ID of the created customer
        '400':
          description: Invalid request data
        '403':
          description: Access denied. Admins only.
        '500':
          description: Internal server error

    get:
      summary: Retrieve all customers for the logged-in admin
      tags:
        - Customers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    phone:
                      type: string
        '403':
          description: Access denied. Admins only.
        '500':
          description: Internal server error

  /api/customers/{id}:
    put:
      summary: Update a customer by ID
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Customer not found
        '403':
          description: Access denied. Admins only.
        '500':
          description: Internal server error

    delete:
      summary: Delete a customer by ID
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to delete
          schema:
            type: string
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Customer not found
        '403':
          description: Access denied. Admins only.
        '500':
          description: Internal server error
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
